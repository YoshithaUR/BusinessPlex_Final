# Middleware Usage Guide

This guide explains how to use the automatic middleware wrapper to avoid repeating `sanitizeInput`, `contactValidation`, and `handleValidationErrors` for every route.

## Problem Solved

Previously, you had to manually apply middleware for each route:
```javascript
// OLD WAY - Repetitive
mainRouter.post("/contact", sanitizeInput, contactValidation, handleValidationErrors, questionController);
mainRouter.post("/newsletter", sanitizeInput, emailValidation, handleValidationErrors, newsletterController);
mainRouter.post("/register", sanitizeInput, userValidation, handleValidationErrors, registerController);
```

## New Solution

Now you can use the `withDefaultMiddleware` wrapper to automatically apply the default middleware chain:

```javascript
// NEW WAY - Clean and DRY
mainRouter.post("/contact", ...withDefaultMiddleware(questionController));
mainRouter.post("/newsletter", ...withDefaultMiddleware(newsletterController, emailOnlyValidation));
mainRouter.post("/register", ...withDefaultMiddleware(registerController, userRegistrationValidation));
```

## Available Functions

### 1. `withDefaultMiddleware(controller, customValidation = null)`

**Parameters:**
- `controller`: Your controller function
- `customValidation`: Optional custom validation rules (defaults to `contactValidation`)

**Returns:** Array of middleware functions that can be spread into the route

**Usage Examples:**

```javascript
// Using default contact validation
mainRouter.post("/contact", ...withDefaultMiddleware(contactController));

// Using custom validation
mainRouter.post("/newsletter", ...withDefaultMiddleware(newsletterController, emailOnlyValidation));

// Using custom validation for user registration
mainRouter.post("/register", ...withDefaultMiddleware(registerController, userRegistrationValidation));
```

### 2. `createValidatedRoute(validationRules = null)`

Alternative approach that returns a function to create validated routes.

**Usage:**
```javascript
const createContactRoute = createValidatedRoute(); // Uses default contactValidation
const createEmailRoute = createValidatedRoute(emailOnlyValidation);

mainRouter.post("/contact", ...createContactRoute(contactController));
mainRouter.post("/newsletter", ...createEmailRoute(newsletterController));
```

## Pre-defined Validation Rules

### `contactValidation`
Default validation for contact forms with fields: `firstName`, `lastName`, `email`, `age`, `contactNumber`, `message`

### `emailOnlyValidation`
Simple validation for email-only forms with field: `email`

### `userRegistrationValidation`
Validation for user registration with fields: `username`, `email`, `password`

## Creating Custom Validation Rules

You can create your own validation rules using `express-validator`:

```javascript
import { body } from 'express-validator';

export const customValidation = [
  body('fieldName')
    .trim()
    .isLength({ min: 1, max: 100 })
    .withMessage('Field is required and must be between 1 and 100 characters')
    .escape(),
  
  body('anotherField')
    .isEmail()
    .withMessage('Please provide a valid email address')
    .normalizeEmail()
];
```

Then use it with the wrapper:
```javascript
mainRouter.post("/custom", ...withDefaultMiddleware(customController, customValidation));
```

## What Gets Applied Automatically

Every route using `withDefaultMiddleware` automatically gets:

1. **`sanitizeInput`** - Sanitizes all string inputs to prevent XSS attacks
2. **Validation Rules** - Either the default `contactValidation` or your custom validation
3. **`handleValidationErrors`** - Checks for validation errors and returns appropriate responses
4. **Your Controller** - The actual business logic

## Benefits

- ✅ **DRY Principle**: No more repeating middleware chains
- ✅ **Consistency**: All routes get the same security and validation treatment
- ✅ **Maintainability**: Change validation logic in one place
- ✅ **Flexibility**: Easy to use custom validation when needed
- ✅ **Readability**: Routes are cleaner and more focused on their purpose

## Migration Guide

To migrate existing routes:

1. **Before:**
```javascript
mainRouter.post("/contact", sanitizeInput, contactValidation, handleValidationErrors, questionController);
```

2. **After:**
```javascript
mainRouter.post("/contact", ...withDefaultMiddleware(questionController));
```

That's it! The middleware chain is automatically applied.
